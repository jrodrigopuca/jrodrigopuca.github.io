{"mappings":"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","sources":["<anon>","src/track.js"],"sourcesContent":["var $67bfe3fa5bc69ae7$exports = {};\n//import dotenv from \"dotenv\";\n//dotenv.config();\nconst $67bfe3fa5bc69ae7$var$GEO_API_KEY = \"crE29IxOA2hc7fNA5t13y3TDdxnb-UXytXV7EZ8oYgM\";\nlet $67bfe3fa5bc69ae7$var$watchLocation = null;\nlet $67bfe3fa5bc69ae7$var$map;\nlet $67bfe3fa5bc69ae7$var$platform;\nlet $67bfe3fa5bc69ae7$var$path = [];\nlet $67bfe3fa5bc69ae7$var$distance = 0;\nlet $67bfe3fa5bc69ae7$var$polyline;\nlet $67bfe3fa5bc69ae7$var$lastAddedPointTime = 0;\nconst $67bfe3fa5bc69ae7$var$checkParamId = ()=>{\n    const urlParams = new URLSearchParams(window.location.search);\n    const idByParams = urlParams.get(\"id\");\n    if (idByParams) {\n        const actualItems = JSON.parse(localStorage.getItem(\"routes\")) || [];\n        const item = actualItems.find((item)=>item.id.toString() === idByParams);\n        console.log(item);\n        if (item) {\n            $67bfe3fa5bc69ae7$var$path = item.path, $67bfe3fa5bc69ae7$var$distance = item.distance;\n            console.log(\"path\", $67bfe3fa5bc69ae7$var$path);\n            //polyline = null;\n            if ($67bfe3fa5bc69ae7$var$path.length > 1) {\n                const lineString = new H.geo.LineString();\n                $67bfe3fa5bc69ae7$var$path.forEach((pos)=>{\n                    lineString.pushPoint(new H.geo.Point(pos.lat, pos.lng));\n                });\n                const polyline2 = new H.map.Polyline(lineString, {\n                    style: {\n                        strokeColor: \"blue\",\n                        lineWidth: 3\n                    }\n                });\n                console.log(polyline2);\n                $67bfe3fa5bc69ae7$var$map.addObject(polyline2);\n            }\n            $67bfe3fa5bc69ae7$var$map.setCenter(item.path[0]);\n        }\n    }\n};\nconst $67bfe3fa5bc69ae7$var$calculateDistance = (lat1, lon1, lat2, lon2)=>{\n    const radlat1 = Math.PI * lat1 / 180;\n    const radlat2 = Math.PI * lat2 / 180;\n    const radlon1 = Math.PI * lon1 / 180;\n    const radlon2 = Math.PI * lon2 / 180;\n    const theta = lon1 - lon2;\n    const radtheta = Math.PI * theta / 180;\n    let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 69.09;\n    dist = dist * 1609.344; // Convert to meters\n    return dist;\n};\nconst $67bfe3fa5bc69ae7$var$updateDistance = (pos)=>{\n    if ($67bfe3fa5bc69ae7$var$path.length > 1) {\n        $67bfe3fa5bc69ae7$var$distance += $67bfe3fa5bc69ae7$var$calculateDistance($67bfe3fa5bc69ae7$var$path[$67bfe3fa5bc69ae7$var$path.length - 2].lat, $67bfe3fa5bc69ae7$var$path[$67bfe3fa5bc69ae7$var$path.length - 2].lng, pos.lat, pos.lng);\n        if ($67bfe3fa5bc69ae7$var$polyline) $67bfe3fa5bc69ae7$var$map.removeObject($67bfe3fa5bc69ae7$var$polyline);\n        const lineString = new H.geo.LineString();\n        $67bfe3fa5bc69ae7$var$path.forEach((pos)=>{\n            lineString.pushPoint(new H.geo.Point(pos.lat, pos.lng));\n        });\n        $67bfe3fa5bc69ae7$var$polyline = new H.map.Polyline(lineString, {\n            style: {\n                strokeColor: \"blue\",\n                lineWidth: 3\n            }\n        });\n        $67bfe3fa5bc69ae7$var$map.addObject($67bfe3fa5bc69ae7$var$polyline);\n    }\n    document.getElementById(\"info\").innerHTML = `\n          <p>Distancia recorrida: ${$67bfe3fa5bc69ae7$var$distance.toFixed(2)} metros</p>\n          <p>Puntos recorridos: ${$67bfe3fa5bc69ae7$var$path.length}</p>\n        `;\n};\nconst $67bfe3fa5bc69ae7$var$updateList = (pos)=>{\n    const ul = document.getElementById(\"list\");\n    ul.innerHTML += `<li>Lat:${pos.lat}  Lng:${pos.lng}</li>`;\n};\nconst $67bfe3fa5bc69ae7$var$initConditions = ()=>{\n    // Cargar la API de Here Maps\n    $67bfe3fa5bc69ae7$var$platform = new H.service.Platform({\n        apikey: $67bfe3fa5bc69ae7$var$GEO_API_KEY\n    });\n    // Crear una instancia del mapa\n    const defaultLayers = $67bfe3fa5bc69ae7$var$platform.createDefaultLayers();\n    $67bfe3fa5bc69ae7$var$map = new H.Map(document.getElementById(\"map-container\"), defaultLayers.vector.normal.map, {\n        zoom: 18,\n        center: {\n            lat: 37.386052,\n            lng: -122.083851\n        },\n        pixelRatio: window.devicePixelRatio || 1,\n        canvas: document.createElement(\"canvas\", {\n            willReadFrequently: true\n        })\n    });\n    new H.mapevents.Behavior(new H.mapevents.MapEvents($67bfe3fa5bc69ae7$var$map));\n};\nif (navigator.geolocation) {\n    $67bfe3fa5bc69ae7$var$initConditions();\n    $67bfe3fa5bc69ae7$var$checkParamId();\n    window.addEventListener(\"resize\", ()=>$67bfe3fa5bc69ae7$var$map.getViewPort().resize());\n} else document.getElementById(\"info\").innerHTML = `Geolocalizaci\\xf3n no soportada`;\nconst $67bfe3fa5bc69ae7$var$stopTracking = ()=>{\n    if ($67bfe3fa5bc69ae7$var$watchLocation) navigator.geolocation.clearWatch($67bfe3fa5bc69ae7$var$watchLocation);\n    document.getElementById(\"start-button\").style.display = \"block\";\n    document.getElementById(\"stop-button\").style.display = \"none\";\n};\nconst $67bfe3fa5bc69ae7$var$startTracking = ()=>{\n    if (navigator.geolocation) {\n        document.getElementById(\"start-button\").style.display = \"none\";\n        document.getElementById(\"stop-button\").style.display = \"block\";\n        $67bfe3fa5bc69ae7$var$watchLocation = navigator.geolocation.watchPosition((position)=>{\n            // PosiciÃ³n actual\n            const actualPosition = {\n                lat: position.coords.latitude,\n                lng: position.coords.longitude\n            };\n            // Verificar si el nuevo punto es igual a alguno de los puntos existentes\n            const isNewPoint = !$67bfe3fa5bc69ae7$var$path.some((point)=>{\n                return point.lat === actualPosition.lat && point.lng === actualPosition.lng;\n            });\n            // Verificar si la diferencia de tiempo entre el nuevo punto y el Ãºltimo punto agregado es mayor o igual a 10 segundos\n            const currentTime = new Date().getTime();\n            const timeDifference = currentTime - $67bfe3fa5bc69ae7$var$lastAddedPointTime;\n            const isTimeDifferenceValid = timeDifference >= 10000; // 10 segundos en milisegundos\n            if (isNewPoint && isTimeDifferenceValid) {\n                $67bfe3fa5bc69ae7$var$lastAddedPointTime = currentTime;\n                $67bfe3fa5bc69ae7$var$path.push(actualPosition);\n                $67bfe3fa5bc69ae7$var$map.addObject(new H.map.Marker(actualPosition));\n                $67bfe3fa5bc69ae7$var$map.setCenter(actualPosition);\n                $67bfe3fa5bc69ae7$var$updateList(actualPosition);\n                $67bfe3fa5bc69ae7$var$updateDistance(actualPosition);\n            }\n        });\n    }\n};\nconst $67bfe3fa5bc69ae7$var$exportPath = ()=>{\n    const jsonData = JSON.stringify($67bfe3fa5bc69ae7$var$path);\n    const blob = new Blob([\n        jsonData\n    ], {\n        type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"recorrido.json\";\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n};\nconst $67bfe3fa5bc69ae7$var$savePath = ()=>{\n    const actualItems = JSON.parse(localStorage.getItem(\"routes\")) || [];\n    const route = {\n        name: \"Route-\" + Date.now(),\n        id: Date.now(),\n        distance: $67bfe3fa5bc69ae7$var$distance,\n        path: $67bfe3fa5bc69ae7$var$path\n    };\n    actualItems.push(route);\n    localStorage.setItem(\"routes\", JSON.stringify(actualItems));\n};\nconst $67bfe3fa5bc69ae7$var$zoomIn = ()=>{\n    $67bfe3fa5bc69ae7$var$map.setZoom($67bfe3fa5bc69ae7$var$map.getZoom() + 1);\n};\nconst $67bfe3fa5bc69ae7$var$zoomOut = ()=>{\n    $67bfe3fa5bc69ae7$var$map.setZoom($67bfe3fa5bc69ae7$var$map.getZoom() - 1);\n};\nconst $67bfe3fa5bc69ae7$var$back = ()=>{\n    window.location.href = \"index.html\";\n};\ndocument.getElementById(\"start-button\").addEventListener(\"click\", $67bfe3fa5bc69ae7$var$startTracking);\ndocument.getElementById(\"stop-button\").addEventListener(\"click\", $67bfe3fa5bc69ae7$var$stopTracking);\ndocument.getElementById(\"export-button\").addEventListener(\"click\", $67bfe3fa5bc69ae7$var$exportPath);\ndocument.getElementById(\"zoom-in-button\").addEventListener(\"click\", $67bfe3fa5bc69ae7$var$zoomIn);\ndocument.getElementById(\"zoom-out-button\").addEventListener(\"click\", $67bfe3fa5bc69ae7$var$zoomOut);\ndocument.getElementById(\"save-button\").addEventListener(\"click\", $67bfe3fa5bc69ae7$var$savePath);\ndocument.getElementById(\"back-button\").addEventListener(\"click\", $67bfe3fa5bc69ae7$var$back);\n\n\n//# sourceMappingURL=track.3e967ef2.js.map\n","//import dotenv from \"dotenv\";\n//dotenv.config();\n\nconst GEO_API_KEY = process.env.GEO_API_KEY || \"\";\n\nlet watchLocation = null;\nlet map;\nlet platform;\nlet path = [];\nlet distance = 0;\nlet polyline;\nlet lastAddedPointTime = 0;\n\nconst checkParamId = () => {\n\tconst urlParams = new URLSearchParams(window.location.search);\n\tconst idByParams = urlParams.get(\"id\");\n\tif (idByParams) {\n\t\tconst actualItems = JSON.parse(localStorage.getItem(\"routes\")) || [];\n\t\tconst item = actualItems.find((item) => item.id.toString() === idByParams);\n\t\tconsole.log(item);\n\t\tif (item) {\n\t\t\t(path = item.path), (distance = item.distance);\n\t\t\tconsole.log(\"path\", path);\n\t\t\t//polyline = null;\n\n\t\t\tif (path.length > 1) {\n\t\t\t\tconst lineString = new H.geo.LineString();\n\t\t\t\tpath.forEach((pos) => {\n\t\t\t\t\tlineString.pushPoint(new H.geo.Point(pos.lat, pos.lng));\n\t\t\t\t});\n\t\t\t\tconst polyline2 = new H.map.Polyline(lineString, {\n\t\t\t\t\tstyle: { strokeColor: \"blue\", lineWidth: 3 },\n\t\t\t\t});\n\t\t\t\tconsole.log(polyline2);\n\t\t\t\tmap.addObject(polyline2);\n\t\t\t}\n\t\t\tmap.setCenter(item.path[0]);\n\t\t}\n\t}\n};\n\nconst calculateDistance = (lat1, lon1, lat2, lon2) => {\n\tconst radlat1 = (Math.PI * lat1) / 180;\n\tconst radlat2 = (Math.PI * lat2) / 180;\n\tconst radlon1 = (Math.PI * lon1) / 180;\n\tconst radlon2 = (Math.PI * lon2) / 180;\n\tconst theta = lon1 - lon2;\n\tconst radtheta = (Math.PI * theta) / 180;\n\tlet dist =\n\t\tMath.sin(radlat1) * Math.sin(radlat2) +\n\t\tMath.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\tdist = Math.acos(dist);\n\tdist = (dist * 180) / Math.PI;\n\tdist = dist * 60 * 1.1515;\n\tdist = dist * 1.609344 * 1000; // Convert to meters\n\treturn dist;\n};\n\nconst updateDistance = (pos) => {\n\tif (path.length > 1) {\n\t\tdistance += calculateDistance(\n\t\t\tpath[path.length - 2].lat,\n\t\t\tpath[path.length - 2].lng,\n\t\t\tpos.lat,\n\t\t\tpos.lng\n\t\t);\n\n\t\tif (polyline) {\n\t\t\tmap.removeObject(polyline);\n\t\t}\n\n\t\tconst lineString = new H.geo.LineString();\n\t\tpath.forEach((pos) => {\n\t\t\tlineString.pushPoint(new H.geo.Point(pos.lat, pos.lng));\n\t\t});\n\t\tpolyline = new H.map.Polyline(lineString, {\n\t\t\tstyle: { strokeColor: \"blue\", lineWidth: 3 },\n\t\t});\n\t\tmap.addObject(polyline);\n\t}\n\n\tdocument.getElementById(\"info\").innerHTML = `\n          <p>Distancia recorrida: ${distance.toFixed(2)} metros</p>\n          <p>Puntos recorridos: ${path.length}</p>\n        `;\n};\n\nconst updateList = (pos) => {\n\tconst ul = document.getElementById(\"list\");\n\tul.innerHTML += `<li>Lat:${pos.lat}  Lng:${pos.lng}</li>`;\n};\n\nconst initConditions = () => {\n\t// Cargar la API de Here Maps\n\tplatform = new H.service.Platform({\n\t\tapikey: GEO_API_KEY,\n\t});\n\t// Crear una instancia del mapa\n\tconst defaultLayers = platform.createDefaultLayers();\n\n\tmap = new H.Map(\n\t\tdocument.getElementById(\"map-container\"),\n\t\tdefaultLayers.vector.normal.map,\n\t\t{\n\t\t\tzoom: 18,\n\t\t\tcenter: { lat: 37.386052, lng: -122.083851 },\n\t\t\tpixelRatio: window.devicePixelRatio || 1,\n\t\t\tcanvas: document.createElement(\"canvas\", {\n\t\t\t\twillReadFrequently: true,\n\t\t\t}),\n\t\t}\n\t);\n\n\tnew H.mapevents.Behavior(new H.mapevents.MapEvents(map));\n};\n\nif (navigator.geolocation) {\n\tinitConditions();\n\tcheckParamId();\n\twindow.addEventListener(\"resize\", () => map.getViewPort().resize());\n} else {\n\tdocument.getElementById(\"info\").innerHTML = `GeolocalizaciÃ³n no soportada`;\n}\n\nconst stopTracking = () => {\n\tif (watchLocation) {\n\t\tnavigator.geolocation.clearWatch(watchLocation);\n\t}\n\tdocument.getElementById(\"start-button\").style.display = \"block\";\n\tdocument.getElementById(\"stop-button\").style.display = \"none\";\n};\n\nconst startTracking = () => {\n\tif (navigator.geolocation) {\n    document.getElementById(\"start-button\").style.display = \"none\";\n    document.getElementById(\"stop-button\").style.display = \"block\";\n\n\t\twatchLocation = navigator.geolocation.watchPosition((position) => {\n\t\t\t// PosiciÃ³n actual\n\t\t\tconst actualPosition = {\n\t\t\t\tlat: position.coords.latitude,\n\t\t\t\tlng: position.coords.longitude,\n\t\t\t};\n\n\t\t\t// Verificar si el nuevo punto es igual a alguno de los puntos existentes\n\t\t\tconst isNewPoint = !path.some((point) => {\n\t\t\t\treturn (\n\t\t\t\t\tpoint.lat === actualPosition.lat && point.lng === actualPosition.lng\n\t\t\t\t);\n\t\t\t});\n\n\t\t\t// Verificar si la diferencia de tiempo entre el nuevo punto y el Ãºltimo punto agregado es mayor o igual a 10 segundos\n\t\t\tconst currentTime = new Date().getTime();\n\t\t\tconst timeDifference = currentTime - lastAddedPointTime;\n\t\t\tconst isTimeDifferenceValid = timeDifference >= 10000; // 10 segundos en milisegundos\n\n      if (isNewPoint && isTimeDifferenceValid){\n        lastAddedPointTime = currentTime;\n        path.push(actualPosition);\n        map.addObject(new H.map.Marker(actualPosition));\n        map.setCenter(actualPosition);\n        updateList(actualPosition);\n        updateDistance(actualPosition);\n      }\n\t\t});\n\t}\n};\n\nconst exportPath = () => {\n\tconst jsonData = JSON.stringify(path);\n\tconst blob = new Blob([jsonData], { type: \"application/json\" });\n\tconst url = URL.createObjectURL(blob);\n\tconst a = document.createElement(\"a\");\n\ta.href = url;\n\ta.download = \"recorrido.json\";\n\tdocument.body.appendChild(a);\n\ta.click();\n\tdocument.body.removeChild(a);\n\tURL.revokeObjectURL(url);\n};\n\nconst savePath = () => {\n\tconst actualItems = JSON.parse(localStorage.getItem(\"routes\")) || [];\n\tconst route = {\n\t\tname: \"Route-\" + Date.now(),\n\t\tid: Date.now(),\n\t\tdistance: distance,\n\t\tpath: path,\n\t};\n\tactualItems.push(route);\n\tlocalStorage.setItem(\"routes\", JSON.stringify(actualItems));\n};\n\nconst zoomIn = () => {\n\tmap.setZoom(map.getZoom() + 1);\n};\n\nconst zoomOut = () => {\n\tmap.setZoom(map.getZoom() - 1);\n};\n\nconst back = () => {\n\twindow.location.href = \"index.html\";\n};\n\ndocument\n\t.getElementById(\"start-button\")\n\t.addEventListener(\"click\", startTracking);\ndocument.getElementById(\"stop-button\").addEventListener(\"click\", stopTracking);\ndocument.getElementById(\"export-button\").addEventListener(\"click\", exportPath);\ndocument.getElementById(\"zoom-in-button\").addEventListener(\"click\", zoomIn);\ndocument.getElementById(\"zoom-out-button\").addEventListener(\"click\", zoomOut);\ndocument.getElementById(\"save-button\").addEventListener(\"click\", savePath);\ndocument.getElementById(\"back-button\").addEventListener(\"click\", back);\n"],"names":["$67bfe3fa5bc69ae7$var$map","$67bfe3fa5bc69ae7$var$polyline","$67bfe3fa5bc69ae7$var$watchLocation","$67bfe3fa5bc69ae7$var$path","$67bfe3fa5bc69ae7$var$distance","$67bfe3fa5bc69ae7$var$lastAddedPointTime","$67bfe3fa5bc69ae7$var$calculateDistance","lat1","lon1","lat2","lon2","radlat1","Math","PI","radlat2","dist","sin","cos","acos","$67bfe3fa5bc69ae7$var$updateDistance","pos","length","lat","lng","removeObject","lineString","H","geo","LineString","forEach","pushPoint","Point","map","Polyline","style","strokeColor","lineWidth","addObject","document","getElementById","innerHTML","toFixed","$67bfe3fa5bc69ae7$var$updateList","ul","navigator","geolocation","$67bfe3fa5bc69ae7$var$initConditions","defaultLayers","$67bfe3fa5bc69ae7$var$platform","service","Platform","apikey","createDefaultLayers","Map","vector","normal","zoom","center","pixelRatio","window","devicePixelRatio","canvas","createElement","willReadFrequently","mapevents","Behavior","MapEvents","$67bfe3fa5bc69ae7$var$checkParamId","idByParams","urlParams","URLSearchParams","location","search","get","item","actualItems","JSON","parse","localStorage","getItem","find","id","toString","console","log","path","distance","polyline2","setCenter","addEventListener","getViewPort","resize","display","watchPosition","position","actualPosition","coords","latitude","longitude","isNewPoint","some","point","currentTime","Date","getTime","timeDifference","push","Marker","clearWatch","blob","Blob","stringify","type","url","URL","createObjectURL","a","href","download","body","appendChild","click","removeChild","revokeObjectURL","setZoom","getZoom","route","name","now","setItem"],"version":3,"file":"track.3e967ef2.js.map"}